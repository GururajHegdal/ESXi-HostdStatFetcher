/** * Utility class used along with SSHUtil class for handling the stream data that * gets generated during remote command execution on hosts. * * Copyright (c) 2016 * * Permission is hereby granted, free of charge, to any person * obtaining a copy of this software and associated documentation files * (the "Software"), to deal in the Software without restriction, * including without limitation the rights to use, copy, modify, merge, * publish, distribute, sublicense, and/or sell copies of the Software, * and to permit persons to whom the Software is furnished to do so, * subject to the following conditions: * * @author VMware * @author Gururaja Hegdal (ghegdal@vmware.com) * @version 1.0 * * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE. */package hostdstat;import java.io.BufferedReader;import java.io.IOException;public class StreamReader implements Runnable{    private final BufferedReader br;    private String name;    private boolean keepThreadRunning = true;    private StringBuffer dataStream = new StringBuffer();    /**     * Constructor     */    public StreamReader(BufferedReader br, String name)    {        this.br = br;        this.name = name;    }    @Override    public void run()    {        /*         * normally would read in while here, but these threads never get any data -         * they are blocked on the first read() call forever.         */        System.out.println("Thread Started. name: " + name);        try {            String temp = null;            while ((temp = br.readLine()) != null && keepThreadRunning) {                System.out.println(name + ". " + temp);                dataStream.append(temp + "\n");            }        } catch (Exception ex) {            System.err.println("Caught following exception" + ex);        } finally {            try {                br.close();            } catch (IOException ex) {                ex.printStackTrace();            }        }        System.out.println("Thread Stopped. name:" + name);    }    public void stopThread()    {        keepThreadRunning = false;    }    /**     * Gets DataStream from StreamReader     *     * @return dataStream     */    public String getDataStream()    {        return dataStream.toString();    }}